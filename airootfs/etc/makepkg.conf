#! /hint/bash

GITFLAGS="--filter=tree:0"

DLAGENTS=(
	"https::/usr/bin/aria2c -UWget -s4 %u -o %o"
	"http::/usr/bin/aria2c -UWget -s4 %u -o %o"
	"ftp::/usr/bin/aria2c -UWget -s4 %u -o %o"
	"file::/usr/bin/curl -gqC - -o %o %u"
	"rsync::/usr/bin/rsync --no-motd -z %u %o"
	"scp::/usr/bin/scp -C %u %o"
)

VCSCLIENTS=(
	"git::git"
	"bzr::bzr"
	"hg::mercurial"
	"svn::subversion"
)

CARCH="x86_64"
CHOST="x86_64-pc-linux-gnu"

CPU="generic"

CFLAGS="-march=$CPU -mtune=$CPU -fcf-protection -fdata-sections -fexceptions -ffunction-sections -fno-plt -fstack-clash-protection -O2 -pipe -Werror=format-security -Wformat -Wp,-D_FORTIFY_SOURCE=2,-D_GLIBCXX_ASSERTIONS -flto=auto -fuse-ld=lld -ftrivial-auto-var-init=zero -Wno-unused-command-line-argument -fstack-protector-strong --param=ssp-buffer-size=4 -fno-plt -fopenmp -pthread -Wno-error -w"
CXXFLAGS="$CFLAGS"
LDFLAGS="-Wl,--as-needed,--gc-sections,-O2,--sort-common,-z,now,-z,relro"
#LDFLAGS="-Wl,-O3,--sort-common,--as-needed,-z,relro,-z,now,-lgomp,-lpthread"
RUSTFLAGS="-C link-arg=$LDFLAGS -C link-dead-code=off -C opt-level=3 -C target-cpu=$CPU"

DEBUG_CFLAGS="-fasynchronous-unwind-tables -g"
DEBUG_CXXFLAGS="-fasynchronous-unwind-tables -g"
DEBUG_RUSTFLAGS="-C debuginfo=2"

if [[ $MAKEPKG_GCC != true ]]; then
	export AR="llvm-ar"
	export CC="clang"
	export CXX="clang++"
	export NM="llvm-nm"
	export OBJCOPY="llvm-objcopy"
	export OBJDUMP="llvm-objdump"
	export READELF="llvm-readelf"
	export STRIP="llvm-strip"
	RUSTFLAGS="$RUSTFLAGS -C linker=clang -C opt-level=3"
else
	export CC="gcc"
	export CXX="g++"
	RUSTFLAGS="$RUSTFLAGS -C linker=gcc -C opt-level=3"
fi

if [[ $CC == clang ]] && [[ $CXX == clang++ ]]; then
	CFLAGS="$CFLAGS -march=$CPU -mtune=$CPU -O3 -pipe -fno-plt -fexceptions -Wp,-D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -fstack-clash-protection -fcf-protection -flto=auto -fuse-ld=lld -ftrivial-auto-var-init=zero -Wno-unused-command-line-argument -Wno-error=unused-command-line-argument"
	CXXFLAGS="$CXXFLAGS -march=$CPU -mtune=$CPU -O3 -pipe -fno-plt -fexceptions -Wp,-D_FORTIFY_SOURCE=2 -Wformat -Werror=format-security -fstack-clash-protection -fcf-protection -flto=auto -fuse-ld=lld -ftrivial-auto-var-init=zero -Wno-unused-command-line-argument -Wno-error=unused-command-line-argument"
	RUSTFLAGS="$RUSTFLAGS -C link-arg=-fuse-ld=lld"
	if [[ $MAKEPKG_LLVM_IAS != false ]]; then
		CFLAGS="$CFLAGS -fintegrated-as"
		CXXFLAGS="$CXXFLAGS -fintegrated-as"
	else
		CFLAGS="$CFLAGS -fno-integrated-as"
		CXXFLAGS="$CXXFLAGS -fno-integrated-as"
	fi
	if [[ $MAKEPKG_LLVM_POLLY != false ]]; then
		# Check if using Arch's build of Polly and load it
		# manually. It doesn't load automatically.
		if pacman -Q "polly" 2> "/dev/null" | grep -q "polly "; then
			CFLAGS="$CFLAGS -Xclang -load -Xclang LLVMPolly.so"
			CXXFLAGS="$CXXFLAGS -Xclang -load -Xclang LLVMPolly.so"
		fi
		CFLAGS="$CFLAGS -mllvm -polly -mllvm -polly-position=early -mllvm -polly-vectorizer=stripmine -mllvm -polly-detect-profitability-min-per-loop-insts=40"
		CXXFLAGS="$CXXFLAGS -mllvm -polly -mllvm -polly-position=before-vectorizer -mllvm -polly-vectorizer=stripmine -mllvm -polly-detect-profitability-min-per-loop-insts=40"
	fi
	if [[ $MAKEPKG_LLVM_CFI == true ]]; then
		CFLAGS="$CFLAGS -fsanitize=cfi"
		CXXFLAGS="$CXXFLAGS -fsanitize=cfi"
	fi
else
	if [[ $MAKEPKG_GCC_GOLD != false ]]; then
		CFLAGS="$CFLAGS -fuse-ld=gold"
		CXXFLAGS="$CXXFLAGS -fuse-ld=gold"
		RUSTFLAGS="$RUSTFLAGS -C link-arg=-fuse-ld=gold"
	else
		CFLAGS="$CFLAGS -fuse-ld=bfd"
		CXXFLAGS="$CXXFLAGS -fuse-ld=bfd"
		RUSTFLAGS="$RUSTFLAGS -C link-arg=-fuse-ld=bfd"
	fi
	if [[ $MAKEPKG_GCC_GRAPHITE != false ]]; then
		CFLAGS="$CFLAGS -fgraphite-identity -ftree-loop-distribution -floop-block -floop-interchange -floop-strip-mine"
		CXXFLAGS="$CXXFLAGS -fgraphite-identity -ftree-loop-distribution -floop-block -floop-interchange -floop-strip-mine"
	fi
	DEBUG_CFLAGS="$DEBUG_CFLAGS -fvar-tracking-assignments"
	DEBUG_CXXFLAGS="$DEBUG_CXXFLAGS -fvar-tracking-assignments"
fi

#if [[ $MAKEPKG_TUNE_NATIVE != false ]]; then
	# LLVM doesn't understand -march=native so let's limit to a sane
	# alternative (x86-64-v3) which would allow us to share packages if need be.
#	CFLAGS="$CFLAGS -march=x86-64-v3 -mcpu=native -mtune=native"
#	CXXFLAGS="$CXXFLAGS -march=x86-64-v3 -mcpu=native -mtune=native"
#	RUSTFLAGS="$RUSTFLAGS -C target-cpu=native"
#else
#	CFLAGS="$CFLAGS -march=x86-64 -mcpu=generic -mtune=generic"
#	CXXFLAGS="$CXXFLAGS -march=x86-64 -mcpu=generic -mtune=generic"
#	RUSTFLAGS="$RUSTFLAGS -C target-cpu=generic"
#fi

MAKEFLAGS="-j$(($(nproc) -1))"
#MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
NINJAFLAGS="-j$(($(nproc) -1))"

BUILDENV=(
	"color"
	"!ccache"
	"check"
	"!distcc"
	"!sign"
)

OPTIONS=(
	"!debug"
	"docs"
	"emptydirs"
	"!libtool"
	"purge"
	"!staticlibs"
	"strip"
	"zipman"
	# Our LTO definitions have moved to /usr/share/makepkg/buildenv/lto.sh.
	"lto"
)
if [[ $MAKEPKG_LTO != false ]]; then
	OPTIONS+=(
		# Our LTO definitions have moved to /usr/share/makepkg/buildenv/lto.sh.
		"lto"
	)
else
	OPTIONS+=(
		# Our LTO definitions have moved to /usr/share/makepkg/buildenv/lto.sh.
		"!lto"
	)
fi

INTEGRITY_CHECK=("b2")

STRIP_BINARIES="--strip-all"
STRIP_SHARED="--strip-unneeded"
STRIP_STATIC="--strip-debug"

MAN_DIRS=(
	"opt/"*"/"{"man","info"}
	"usr/"{,"local/"}{,"share/"}{"man","info"}
)
DOC_DIRS=(
	"opt/"*"/"{"doc","gtk-doc"}
	"usr/"{,"local/"}{,"share/"}{"doc","gtk-doc"}
)

PURGE_TARGETS=(
#-- Compression parameters for UPX
#UPXFLAGS="--ultra-brute"
#-- Compression parameters for optiPNG
#OPTIPNGFLAGS=" -o7 -zm1-9"
#-- Compression parameters for SVGO
#SVGOFLAGS="--multipass"
	"*.pod"
	".packlist"
	"usr/{,share}/info/dir"
)

DBGSRCDIR="/usr/src/debug"

if [[ -z $MAKEPKG_PACKAGER ]]; then
	PACKAGER="Xxxx Xxxx <xxxx@xxxx.xxx>"
else
	PACKAGER="$MAKEPKG_PACKAGER"
fi

COMPRESSGZ=(pigz -c -f -n)
COMPRESSBZ2=(lbzip2 -c -f)
COMPRESSXZ=(xz -c -z -T$(($(nproc)-1)) -)
COMPRESSZST=(zstd -c -z -q -T$(($(nproc)-1)) -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lrzip -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lrzip -q)
#COMPRESSGZ=(gzip -c -f -n --best)
#COMPRESSBZ2=(bzip2 -c -f --best)
#COMPRESSXZ=(xz -T0 -c -z --best -)
#COMPRESSZST=(zstd -c -z -q -T0 -)
#COMPRESSLRZ=(lrzip -9 -q)
#COMPRESSLZO=(lzop -q --best)
#COMPRESSZ=(compress -c -f)
#COMPRESSLZ4=(lz4 -q --best)
#COMPRESSLZ=(lzip -c -f)

PKGEXT=".pkg.tar.zst"
SRCEXT=".src.tar.gz"
